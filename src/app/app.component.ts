/**
 * AppComponent con integraci√≥n SOLID (mantiene funcionalidad original)
 * Ubicaci√≥n: src/app/app.component.ts
 */

import {
  Component,
  OnInit,
  OnDestroy,
  Inject,
  PLATFORM_ID,
  inject,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  Router,
  RouterOutlet,
  NavigationEnd,
  NavigationStart,
} from '@angular/router';
import { filter, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';

// Componentes originales
import { LeftSidebarComponent } from './components/left-sidebar/left-sidebar.component';
import { RightSidebarComponent } from './components/right-sidebar/right-sidebar.component';

// Servicios SOLID (opcional - solo para logging mejorado)
import { ConsoleLoggerService } from './services/core/logger.service';
import { FooterComponent } from './components/footer/footer.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    CommonModule,
    RouterOutlet,
    LeftSidebarComponent,
    RightSidebarComponent,
    FooterComponent,
  ],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'],
})
export class AppComponent implements OnInit, OnDestroy {
  private static instanceCount = 0;
  private instanceId: string;
  private destroy$ = new Subject<void>();
  private routerEventsDisabled = false;
  private navigationCount = 0;

  // Integraci√≥n opcional con SOLID logging
  private logger = inject(ConsoleLoggerService, { optional: true });

  constructor(
    @Inject(PLATFORM_ID) private readonly platformId: Object,
    private readonly router: Router
  ) {
    AppComponent.instanceCount++;
    this.instanceId = `app-${AppComponent.instanceCount}`;

    // Logging mejorado con SOLID (fallback a console si no est√° disponible)
    this.logInfo(`üèóÔ∏è APP COMPONENT - Instancia ${this.instanceId} creada`);

    // Protecci√≥n contra m√∫ltiples instancias del AppComponent
    if (AppComponent.instanceCount > 1) {
      this.logWarning(
        `‚ö†Ô∏è M√öLTIPLES INSTANCIAS DE APP COMPONENT DETECTADAS: ${AppComponent.instanceCount}`
      );
      this.logWarning(
        'üîÑ Instancia adicional iniciada (puede ser normal en desarrollo con HMR)'
      );

      // En lugar de return, continuamos pero con logging mejorado
    }

    // Monitorear navegaci√≥n con protecci√≥n mejorada
    this.router.events
      .pipe(
        filter(
          (event) =>
            event instanceof NavigationStart || event instanceof NavigationEnd
        ),
        takeUntil(this.destroy$)
      )
      .subscribe((event) => {
        if (this.routerEventsDisabled) {
          this.logWarning(
            'üö´ Eventos de router deshabilitados para evitar bucle'
          );
          return;
        }

        if (event instanceof NavigationStart) {
          this.navigationCount++;
          this.logDebug(
            `üß≠ Navegaci√≥n iniciada: ${event.url} (count: ${this.navigationCount})`
          );

          // Protecci√≥n mejorada contra bucles de navegaci√≥n
          if (this.navigationCount > 5) {
            this.logError(
              '‚ö†Ô∏è BUCLE DE NAVEGACI√ìN DETECTADO - DESHABILITANDO EVENTOS'
            );
            this.logError(
              'üõë ROUTER EVENTS DISABLED PARA PREVENIR BUCLE INFINITO'
            );
            this.routerEventsDisabled = true;
            this.destroy$.next();
            return;
          }
        } else if (event instanceof NavigationEnd) {
          this.logDebug(`‚úÖ Navegaci√≥n completada: ${event.url}`);

          // Resetear contador despu√©s de navegaci√≥n exitosa
          setTimeout(() => {
            this.navigationCount = 0;
            this.logDebug('üîÑ Contador de navegaci√≥n reseteado');
          }, 2000);
        }
      });
  }

  ngOnInit(): void {
    this.logInfo(`üöÄ APP COMPONENT INIT - Instancia ${this.instanceId}`);
    this.logInfo('‚úÖ Arquitectura SOLID inicializada');

    // Protecci√≥n adicional en ngOnInit
    if (AppComponent.instanceCount > 1) {
      this.logWarning(
        `‚ö†Ô∏è M√∫ltiples instancias detectadas en ngOnInit (${AppComponent.instanceCount})`
      );
      // Continuar con la inicializaci√≥n normal
    }

    // Log del estado de la aplicaci√≥n
    this.logDebug('üìä App Component State:', {
      instanceId: this.instanceId,
      instanceCount: AppComponent.instanceCount,
      platformId: this.platformId,
      routerEventsDisabled: this.routerEventsDisabled,
    });
  }

  ngOnDestroy(): void {
    this.logInfo(`üóëÔ∏è APP COMPONENT DESTROY - Instancia ${this.instanceId}`);

    this.destroy$.next();
    this.destroy$.complete();

    // Decrementar contador de instancias
    AppComponent.instanceCount = Math.max(0, AppComponent.instanceCount - 1);

    this.logDebug(
      `üìâ Instance count after destroy: ${AppComponent.instanceCount}`
    );
  }

  // ===============================================
  // M√âTODOS DE LOGGING CON FALLBACK
  // ===============================================

  private logInfo(message: string, ...args: any[]): void {
    if (this.logger) {
      this.logger.info(message, ...args);
    } else {
      console.log(`‚ÑπÔ∏è ${message}`, ...args);
    }
  }

  private logWarning(message: string, ...args: any[]): void {
    if (this.logger) {
      this.logger.warn(message, ...args);
    } else {
      console.warn(`‚ö†Ô∏è ${message}`, ...args);
    }
  }

  private logError(message: string, ...args: any[]): void {
    if (this.logger) {
      this.logger.error(message, ...args);
    } else {
      console.error(`‚ùå ${message}`, ...args);
    }
  }

  private logDebug(message: string, ...args: any[]): void {
    if (this.logger) {
      this.logger.debug(message, ...args);
    } else {
      console.debug(`üîç ${message}`, ...args);
    }
  }

  // ===============================================
  // M√âTODOS P√öBLICOS PARA DEBUGGING
  // ===============================================

  /**
   * M√©todo p√∫blico para debugging del estado del componente
   */
  public debugAppState(): any {
    const state = {
      instanceId: this.instanceId,
      instanceCount: AppComponent.instanceCount,
      routerEventsDisabled: this.routerEventsDisabled,
      navigationCount: this.navigationCount,
      isDestroyed: this.destroy$.closed,
    };

    this.logDebug('=== APP COMPONENT DEBUG STATE ===');
    this.logDebug('App State:', state);
    this.logDebug('=== END APP COMPONENT DEBUG ===');

    return state;
  }

  /**
   * M√©todo para resetear protecciones (√∫til en desarrollo)
   */
  public resetNavigationProtection(): void {
    this.logInfo('üîÑ Reseteando protecciones de navegaci√≥n');
    this.routerEventsDisabled = false;
    this.navigationCount = 0;
  }
}
